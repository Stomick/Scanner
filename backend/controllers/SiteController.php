<?php

namespace backend\controllers;

use backend\components\UserDocs;
use common\models\LoginAdmin;
use models\Balance;
use models\City;
use models\Country;
use models\MUser;
use models\SignUpForm;
use models\Specialties;
use models\User;
use models\Vacancies;
use Yii;
use yii\data\Pagination;
use yii\data\Sort;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\Login;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['login', 'signup', 'error', 'getcity', 'vacancies', 'works', 'test', 'vacans', 'spec', 'docs'],
                        'allow' => true,
                    ],
                    [
                        'actions' => ['logout', 'index'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
        ];
    }

    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {
        return $this->render('index', ['page' => 'main', 'action' => 'main']);
    }

    public function actionVacancies($info = null)
    {
        if ($info == null) {
            $query = Vacancies::find()->where(['tmp' => 0]);
            $countQuery = clone $query;
            $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 20]);
            $sort = new Sort([
                'attributes' => [
                    'price' => [
                        'asc' => ['price' => SORT_ASC],
                        'desc' => ['price' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По цене',
                    ],
                    'title' => [
                        'asc' => ['title' => SORT_ASC],
                        'desc' => ['title' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По названию',
                    ],
                    'created' => [
                        'asc' => ['created_at' => SORT_ASC],
                        'desc' => ['created_at' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По дате создания',
                    ],
                ],
            ]);
            $models = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->orderBy($sort->orders)
                ->all();
            return $this->render('index', ['page' => 'main', 'action' => 'vacancies', 'markers' => $models, 'pages' => $pages,
                'sort' => $sort]);
        } else {
            return $this->render('index', ['page' => 'main', 'action' => 'vacinfo', 'tp' => 'vacancies', 'vacans' => Vacancies::findOne($info)]);

        }
    }

    public function actionWorks($info = null)
    {
        if ($info == null) {
            $query = Specialties::find();
            $countQuery = clone $query;
            $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 20]);
            $sort = new Sort([
                'attributes' => [
                    'price' => [
                        'asc' => ['price' => SORT_ASC],
                        'desc' => ['price' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По цене',
                    ],
                    'title' => [
                        'asc' => ['title' => SORT_ASC],
                        'desc' => ['title' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По названию',
                    ],
                    'created' => [
                        'asc' => ['created_at' => SORT_ASC],
                        'desc' => ['created_at' => SORT_DESC],
                        'default' => SORT_DESC,
                        'label' => 'По дате создания',
                    ],
                ],
            ]);
            $models = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->orderBy($sort->orders)
                ->all();
            return $this->render('index', ['page' => 'main', 'action' => 'specialties', 'markers' => $models, 'pages' => $pages,
                'sort' => $sort]);
        } else {
            return $this->render('index', ['page' => 'main', 'action' => 'vacinfo', 'tp' => 'specialties', 'vacans' => Specialties::findOne($info)]);

        }
    }

    /**
     * Login action.
     *
     * @return string
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginAdmin();

        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->redirect('/');
        } else {
            $model->password = '';
            return $this->render('login', [
                'model' => $model,
            ]);
        }
    }

    public function actionSignup()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        $model = new SignUpForm();
        if ($model->load(Yii::$app->request->post()) && $model->saveToBase()) {
            $model->login();
            return $this->redirect('/');
        } else {
            return $this->render('signup', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    public function actionGetcity($id)
    {
        if (Country::findOne($id)) {
            die(json_encode(City::find()->select(['name_ru as name', 'id'])->where(['country_id' => $id])->orderBy('sort DESC , name ASC')->asArray()->all(), JSON_UNESCAPED_UNICODE));
        }
    }

    public function actionTest()
    {

        if ($user = MUser::findOne(3)){
            var_dump($user->SendRegEmail('fjdjdhjdhjthj'));
        }
        die();
    }

    public function actionDocs($key)
    {
        if($key=="95bi7s24IdhQ6srUOQRj") {
            $userDoc = new UserDocs();
            foreach (Balance::find()->select(['DISTINCT `user_id`'])->all() as $user) {
                if ($us = MUser::find()->where(['id' => $user->user_id, 'status' => 10])->one()) {
                    $payments = [];
                    $summ =0;
                    foreach (Balance::find()->select(['DISTINCT `type_id`', 'type', 'summ', 'name'])->where(['user_id' => $user->user_id])
                                 ->andWhere('created_at<' . strtotime('now') . ' AND created_at >' . strtotime('-1 month'))
                                 ->all() as $k => $v) {
                        $count = Balance::find()->where(['type_id' => $v->type_id, 'type' => $v->type,
                            'user_id' => $user->user_id])
                            ->andWhere('created_at<' . strtotime('now') . ' AND created_at >' . strtotime('-1 month'))
                            ->count();
                        switch ($v->type) {
                            case 'Vacancies':
                                array_push($payments, [
                                    'name' => "Вакансия №{$v->type_id} \"{$v->name}\"",
                                    'id' => $v->type_id,
                                    'count' => $count,
                                    'summ' => 0 - ($v->summ)
                                ]);
                                $summ += (0 - ($v->summ)) * $count;
                                break;
                            case 'Specialties':
                                array_push($payments, [
                                    'name' => "Специальность №{$v->type_id} \"{$v->name}\"",
                                    'id' => $v->type_id,
                                    'count' => $count,
                                    'summ' => 0 - ($v->summ)
                                ]);
                                $summ += (0 - ($v->summ)) * $count;
                                break;
                        }
                    }
                    $dir = "/home/jobscaner/www/server/frontend/web/docs/{$us->id}";
                    $act = 'act_' . date('H-i_d-m-Y', strtotime('now')) . '.pdf';
                    if (!is_dir($dir)) {
                        if (!mkdir($dir)) {
                            break;
                        }
                    }
                    $docs = new \models\UserDocs();
                    $docs->user_id = $us->id;
                    $docs->summ = $summ;
                    $docs->url = "/docs/{$us->id}/" . $act;
                    $docs->save();
                    $file = $userDoc->getDocsHtml($us->firstname . ' ' . $us->lastname, $payments, $docs->id,
                        ['m' => date('m', strtotime('now')), 'y' => date('Y', strtotime('now'))]);
                    if (Yii::$app->html2pdf
                        ->convert($file)
                        ->saveAs($dir . '/' . $act)) {
                    };
                }
            }
        }
        die();
    }

    public function actionVacans($key)
    {
        if ($key == 'W0aXLGYSao0pANpPmHAs') {

            foreach (MUser::find()
                         ->where('(SELECT COUNT(*) as cv FROM `vacancies` vac WHERE vac.public=1 AND vac.arhive=0 AND vac.tmp=0 AND vac.muser_id=musers.id AND pay_date < ' . strtotime('now') . ')')
                         ->all() as $us) {
                foreach (Vacancies::find()
                             ->where(['muser_id' => $us->id, 'public' => 1, 'arhive' => 0])
                             ->andWhere('pay_date <' . strtotime('now'))
                             ->limit((MUser::findOne($us->id))->getCountSpec())
                             ->offset(3)
                             ->orderBy('created_at,pay_date')
                             ->asArray()
                             ->all() as $spec) {
                    $sp = Vacancies::findOne($spec['id']);
                    if (($us->balance - 10) > 0) {
                        $us->balance -= 10;
                        if ($us->update()) {
                            $balance = new Balance();
                            $balance->user_id = $us->id;
                            $balance->summ = -10;
                            $balance->type = 'Vacancies';
                            $balance->type_id = $sp->id;
                            $balance->name = $sp->title;
                            $balance->comment = 'Списание с баланса за платное размещение вакансии "' . $sp->title . '"';
                            $balance->save();
                            $sp->pay_date = strtotime('+1 day');
                            $sp->update();
                        }
                    } else {
                        $sp->public = 0;
                        $sp->update();
                        var_dump($us->SendCloseVacEmail($sp->title));
                    }
                }
            }
        }
    }

    public function actionSpec($key)
    {
        if ($key == '95bi7s24IdhQ6srUOQRj') {
            var_dump('test');
            foreach (MUser::find()
                         ->where('(SELECT COUNT(*) as cv FROM `specialties` vac WHERE vac.public=1 AND vac.arhive=0 AND vac.tmp=0 AND vac.muser_id=musers.id AND pay_date < ' . strtotime('now') . ') > 3')
                         ->all() as $us) {

                foreach (Specialties::find()
                             ->where(['muser_id' => $us->id, 'public' => 1, 'arhive' => 0, 'tmp' => 0])
                             ->andWhere('pay_date <' . strtotime('now'))
                             ->limit((MUser::findOne($us->id))->getCountSpec())
                             ->offset(3)
                             ->orderBy('created_at,pay_date')
                             ->asArray()
                             ->all() as $spec) {
                    $sp = Specialties::findOne($spec['id']);
                    if (($us->balance - 10) > 0) {
                        $us->balance -= 10;
                        if ($us->update()) {
                            $balance = new Balance();
                            $balance->user_id = $us->id;
                            $balance->summ = -10;
                            $balance->type = 'Specialties';
                            $balance->type_id = $sp->id;
                            $balance->name = $sp->title;
                            $balance->comment = 'Списание с баланса за платное размещение специализации "' . $sp->title . '"';
                            $balance->save();
                            $sp->pay_date = strtotime('+1 day');
                            $sp->update();
                        }
                    } else {
                        $sp->public = 0;
                        $sp->update();
                        try {
                            var_dump($us->SendCloseSpecEmail($sp->title));
                        } catch (\Exception $e) {
                            var_dump($e->getMessage());
                        }
                    }
                }
            }
        }
    }
}
